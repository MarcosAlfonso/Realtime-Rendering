#version 400

layout(quads, fractional_odd_spacing, ccw) in;

in vec3 tcPosition[];
in float tcLevel[];
in int patchID[];
in vec2 tvUV[];


out vec3 tePosition;
out vec4 tePatchDistance;
out float teLevel;
out int tePatchID;
out vec2 teUV;

uniform mat4 MVP;
uniform sampler2D myTextureSampler;

vec3 vec3_interpolateQuad(vec3 v0, vec3 v1, vec3 v2, vec3 v3)
{
	vec3 a = mix(v0, v1, gl_TessCoord.x);
	vec3 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
} 

vec2 vec2_interpolateQuad(vec2 v0, vec2 v1, vec2 v2, vec2 v3)
{
	vec2 a = mix(v0, v1, gl_TessCoord.x);
	vec2 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
} 

void main()
{	
	teLevel = tcLevel[0];
	
	float u = gl_TessCoord.x, v = gl_TessCoord.y;

	tePatchDistance = vec4(u, v, 1-u, 1-v);

	tePosition = vec3_interpolateQuad(tcPosition[0], tcPosition[1], tcPosition[2], tcPosition[3]);

	teUV = tePosition.xz + vec2(.5,.5);

	//SAMPLE HEIGHT HERE
	float height =  texture(myTextureSampler, teUV).r + texture(myTextureSampler, teUV).g + texture(myTextureSampler, teUV).b;

	tePosition = vec3(tePosition.x, height, tePosition.z);

	gl_Position = MVP * vec4(tePosition.x, tePosition.y, tePosition.z, 1.0);
} 