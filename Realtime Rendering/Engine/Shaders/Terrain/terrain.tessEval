#version 400

layout(quads, equal_spacing, cw) in;

in vec3 tcPosition[];
out vec3 tePosition;
out vec4 tePatchDistance;

uniform mat4 MVP;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
} 

vec3 interpolateQuad(vec3 v0, vec3 v1, vec3 v2, vec3 v3)
{
	vec3 a = mix(v0, v1, gl_TessCoord.x);
	vec3 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
} 

void main()
{	
	
	float u = gl_TessCoord.x, v = gl_TessCoord.y;
	tePatchDistance = vec4(u, v, 1-u, 1-v);

	tePosition = interpolateQuad(tcPosition[0], tcPosition[1], tcPosition[2], tcPosition[3]);

	//SAMPLE HEIGHT HERE
	int height = 0;

	gl_Position = MVP * vec4(tePosition.x, height, tePosition.z, 1.0);
} 